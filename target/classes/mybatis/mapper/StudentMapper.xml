<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.hngy.educationaladministration.mapper.StudentMapper">
  <resultMap id="BaseResultMap" type="com.hngy.educationaladministration.entity.Student">
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="userName" jdbcType="VARCHAR" property="username" />
    <result column="stuNum" jdbcType="VARCHAR" property="stunum" />
    <result column="id_class" jdbcType="BIGINT" property="idClass" />
    <result column="name" jdbcType="VARCHAR" property="name" />
    <result column="gender" jdbcType="VARCHAR" property="gender" />
    <result column="pwd" jdbcType="VARCHAR" property="pwd" />
  </resultMap>
  <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="com.hngy.educationaladministration.entity.StudentWithBLOBs">
    <result column="remark" jdbcType="LONGVARCHAR" property="remark" />
    <result column="bak1" jdbcType="LONGVARCHAR" property="bak1" />
    <result column="bak2" jdbcType="LONGVARCHAR" property="bak2" />
    <result column="bak3" jdbcType="LONGVARCHAR" property="bak3" />
    <result column="bak4" jdbcType="LONGVARCHAR" property="bak4" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, userName, stuNum, id_class, name, gender, pwd
  </sql>
  <sql id="Blob_Column_List">
    remark, bak1, bak2, bak3, bak4
  </sql>
  <select id="selectByExampleWithBLOBs" parameterType="com.hngy.educationaladministration.entity.StudentExample" resultMap="ResultMapWithBLOBs">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from t_student
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
    <if test="rows != null">
      <if test="offset != null">
        limit ${offset}, ${rows}
      </if>
      <if test="offset == null">
        limit ${rows}
      </if>
    </if>
  </select>
  <select id="selectByExample" parameterType="com.hngy.educationaladministration.entity.StudentExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from t_student
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
    <if test="rows != null">
      <if test="offset != null">
        limit ${offset}, ${rows}
      </if>
      <if test="offset == null">
        limit ${rows}
      </if>
    </if>
  </select>
  <select id="selectByExampleSelective" parameterType="map" resultMap="ResultMapWithBLOBs">
    select
    <if test="example != null and example.distinct">
      distinct
    </if>
    <choose>
      <when test="selective != null and selective.length > 0">
        <foreach collection="selective" item="column" separator=",">
          ${column.aliasedEscapedColumnName}
        </foreach>
      </when>
      <otherwise>
        <include refid="Base_Column_List" />
        ,
        <include refid="Blob_Column_List" />
      </otherwise>
    </choose>
    from t_student
    <if test="example != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
    <if test="example != null and example.orderByClause != null">
      order by ${example.orderByClause}
    </if>
    <if test="example != null and example.rows != null">
      <if test="example.offset != null">
        limit ${example.offset}, ${example.rows}
      </if>
      <if test="example.offset == null">
        limit ${example.rows}
      </if>
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="ResultMapWithBLOBs">
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from t_student
    where id = #{id,jdbcType=BIGINT}
  </select>
  <select id="selectByPrimaryKeySelective" parameterType="map" resultMap="ResultMapWithBLOBs">
    select
    <choose>
      <when test="selective != null and selective.length > 0">
        <foreach collection="selective" item="column" separator=",">
          ${column.aliasedEscapedColumnName}
        </foreach>
      </when>
      <otherwise>
        <include refid="Base_Column_List" />
        ,
        <include refid="Blob_Column_List" />
      </otherwise>
    </choose>
    from t_student
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from t_student
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <delete id="deleteByExample" parameterType="com.hngy.educationaladministration.entity.StudentExample">
    delete from t_student
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.hngy.educationaladministration.entity.StudentWithBLOBs">
    insert into t_student (id, userName, stuNum, 
      id_class, name, gender, 
      pwd, remark, bak1, 
      bak2, bak3, bak4
      )
    values (#{id,jdbcType=BIGINT}, #{username,jdbcType=VARCHAR}, #{stunum,jdbcType=VARCHAR}, 
      #{idClass,jdbcType=BIGINT}, #{name,jdbcType=VARCHAR}, #{gender,jdbcType=VARCHAR}, 
      #{pwd,jdbcType=VARCHAR}, #{remark,jdbcType=LONGVARCHAR}, #{bak1,jdbcType=LONGVARCHAR}, 
      #{bak2,jdbcType=LONGVARCHAR}, #{bak3,jdbcType=LONGVARCHAR}, #{bak4,jdbcType=LONGVARCHAR}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.hngy.educationaladministration.entity.StudentWithBLOBs">
    insert into t_student
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="username != null">
        userName,
      </if>
      <if test="stunum != null">
        stuNum,
      </if>
      <if test="idClass != null">
        id_class,
      </if>
      <if test="name != null">
        name,
      </if>
      <if test="gender != null">
        gender,
      </if>
      <if test="pwd != null">
        pwd,
      </if>
      <if test="remark != null">
        remark,
      </if>
      <if test="bak1 != null">
        bak1,
      </if>
      <if test="bak2 != null">
        bak2,
      </if>
      <if test="bak3 != null">
        bak3,
      </if>
      <if test="bak4 != null">
        bak4,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=BIGINT},
      </if>
      <if test="username != null">
        #{username,jdbcType=VARCHAR},
      </if>
      <if test="stunum != null">
        #{stunum,jdbcType=VARCHAR},
      </if>
      <if test="idClass != null">
        #{idClass,jdbcType=BIGINT},
      </if>
      <if test="name != null">
        #{name,jdbcType=VARCHAR},
      </if>
      <if test="gender != null">
        #{gender,jdbcType=VARCHAR},
      </if>
      <if test="pwd != null">
        #{pwd,jdbcType=VARCHAR},
      </if>
      <if test="remark != null">
        #{remark,jdbcType=LONGVARCHAR},
      </if>
      <if test="bak1 != null">
        #{bak1,jdbcType=LONGVARCHAR},
      </if>
      <if test="bak2 != null">
        #{bak2,jdbcType=LONGVARCHAR},
      </if>
      <if test="bak3 != null">
        #{bak3,jdbcType=LONGVARCHAR},
      </if>
      <if test="bak4 != null">
        #{bak4,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.hngy.educationaladministration.entity.StudentExample" resultType="java.lang.Long">
    select count(*) from t_student
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update t_student
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=BIGINT},
      </if>
      <if test="record.username != null">
        userName = #{record.username,jdbcType=VARCHAR},
      </if>
      <if test="record.stunum != null">
        stuNum = #{record.stunum,jdbcType=VARCHAR},
      </if>
      <if test="record.idClass != null">
        id_class = #{record.idClass,jdbcType=BIGINT},
      </if>
      <if test="record.name != null">
        name = #{record.name,jdbcType=VARCHAR},
      </if>
      <if test="record.gender != null">
        gender = #{record.gender,jdbcType=VARCHAR},
      </if>
      <if test="record.pwd != null">
        pwd = #{record.pwd,jdbcType=VARCHAR},
      </if>
      <if test="record.remark != null">
        remark = #{record.remark,jdbcType=LONGVARCHAR},
      </if>
      <if test="record.bak1 != null">
        bak1 = #{record.bak1,jdbcType=LONGVARCHAR},
      </if>
      <if test="record.bak2 != null">
        bak2 = #{record.bak2,jdbcType=LONGVARCHAR},
      </if>
      <if test="record.bak3 != null">
        bak3 = #{record.bak3,jdbcType=LONGVARCHAR},
      </if>
      <if test="record.bak4 != null">
        bak4 = #{record.bak4,jdbcType=LONGVARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExampleWithBLOBs" parameterType="map">
    update t_student
    set id = #{record.id,jdbcType=BIGINT},
      userName = #{record.username,jdbcType=VARCHAR},
      stuNum = #{record.stunum,jdbcType=VARCHAR},
      id_class = #{record.idClass,jdbcType=BIGINT},
      name = #{record.name,jdbcType=VARCHAR},
      gender = #{record.gender,jdbcType=VARCHAR},
      pwd = #{record.pwd,jdbcType=VARCHAR},
      remark = #{record.remark,jdbcType=LONGVARCHAR},
      bak1 = #{record.bak1,jdbcType=LONGVARCHAR},
      bak2 = #{record.bak2,jdbcType=LONGVARCHAR},
      bak3 = #{record.bak3,jdbcType=LONGVARCHAR},
      bak4 = #{record.bak4,jdbcType=LONGVARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update t_student
    set id = #{record.id,jdbcType=BIGINT},
      userName = #{record.username,jdbcType=VARCHAR},
      stuNum = #{record.stunum,jdbcType=VARCHAR},
      id_class = #{record.idClass,jdbcType=BIGINT},
      name = #{record.name,jdbcType=VARCHAR},
      gender = #{record.gender,jdbcType=VARCHAR},
      pwd = #{record.pwd,jdbcType=VARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.hngy.educationaladministration.entity.StudentWithBLOBs">
    update t_student
    <set>
      <if test="username != null">
        userName = #{username,jdbcType=VARCHAR},
      </if>
      <if test="stunum != null">
        stuNum = #{stunum,jdbcType=VARCHAR},
      </if>
      <if test="idClass != null">
        id_class = #{idClass,jdbcType=BIGINT},
      </if>
      <if test="name != null">
        name = #{name,jdbcType=VARCHAR},
      </if>
      <if test="gender != null">
        gender = #{gender,jdbcType=VARCHAR},
      </if>
      <if test="pwd != null">
        pwd = #{pwd,jdbcType=VARCHAR},
      </if>
      <if test="remark != null">
        remark = #{remark,jdbcType=LONGVARCHAR},
      </if>
      <if test="bak1 != null">
        bak1 = #{bak1,jdbcType=LONGVARCHAR},
      </if>
      <if test="bak2 != null">
        bak2 = #{bak2,jdbcType=LONGVARCHAR},
      </if>
      <if test="bak3 != null">
        bak3 = #{bak3,jdbcType=LONGVARCHAR},
      </if>
      <if test="bak4 != null">
        bak4 = #{bak4,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="com.hngy.educationaladministration.entity.StudentWithBLOBs">
    update t_student
    set userName = #{username,jdbcType=VARCHAR},
      stuNum = #{stunum,jdbcType=VARCHAR},
      id_class = #{idClass,jdbcType=BIGINT},
      name = #{name,jdbcType=VARCHAR},
      gender = #{gender,jdbcType=VARCHAR},
      pwd = #{pwd,jdbcType=VARCHAR},
      remark = #{remark,jdbcType=LONGVARCHAR},
      bak1 = #{bak1,jdbcType=LONGVARCHAR},
      bak2 = #{bak2,jdbcType=LONGVARCHAR},
      bak3 = #{bak3,jdbcType=LONGVARCHAR},
      bak4 = #{bak4,jdbcType=LONGVARCHAR}
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.hngy.educationaladministration.entity.Student">
    update t_student
    set userName = #{username,jdbcType=VARCHAR},
      stuNum = #{stunum,jdbcType=VARCHAR},
      id_class = #{idClass,jdbcType=BIGINT},
      name = #{name,jdbcType=VARCHAR},
      gender = #{gender,jdbcType=VARCHAR},
      pwd = #{pwd,jdbcType=VARCHAR}
    where id = #{id,jdbcType=BIGINT}
  </update>
  <insert id="batchInsert" parameterType="map">
    insert into t_student
    (id, userName, stuNum, id_class, name, gender, pwd, remark, bak1, bak2, bak3, bak4
      )
    values
    <foreach collection="list" item="item" separator=",">
      (#{item.id,jdbcType=BIGINT}, #{item.username,jdbcType=VARCHAR}, #{item.stunum,jdbcType=VARCHAR}, 
        #{item.idClass,jdbcType=BIGINT}, #{item.name,jdbcType=VARCHAR}, #{item.gender,jdbcType=VARCHAR}, 
        #{item.pwd,jdbcType=VARCHAR}, #{item.remark,jdbcType=LONGVARCHAR}, #{item.bak1,jdbcType=LONGVARCHAR}, 
        #{item.bak2,jdbcType=LONGVARCHAR}, #{item.bak3,jdbcType=LONGVARCHAR}, #{item.bak4,jdbcType=LONGVARCHAR}
        )
    </foreach>
  </insert>
  <insert id="batchInsertSelective" parameterType="map">
    insert into t_student (
    <foreach collection="selective" item="column" separator=",">
      ${column.escapedColumnName}
    </foreach>
    )
    values
    <foreach collection="list" item="item" separator=",">
      (
      <foreach collection="selective" item="column" separator=",">
        <if test="'id'.toString() == column.value">
          #{item.id,jdbcType=BIGINT}
        </if>
        <if test="'userName'.toString() == column.value">
          #{item.username,jdbcType=VARCHAR}
        </if>
        <if test="'stuNum'.toString() == column.value">
          #{item.stunum,jdbcType=VARCHAR}
        </if>
        <if test="'id_class'.toString() == column.value">
          #{item.idClass,jdbcType=BIGINT}
        </if>
        <if test="'name'.toString() == column.value">
          #{item.name,jdbcType=VARCHAR}
        </if>
        <if test="'gender'.toString() == column.value">
          #{item.gender,jdbcType=VARCHAR}
        </if>
        <if test="'pwd'.toString() == column.value">
          #{item.pwd,jdbcType=VARCHAR}
        </if>
        <if test="'remark'.toString() == column.value">
          #{item.remark,jdbcType=LONGVARCHAR}
        </if>
        <if test="'bak1'.toString() == column.value">
          #{item.bak1,jdbcType=LONGVARCHAR}
        </if>
        <if test="'bak2'.toString() == column.value">
          #{item.bak2,jdbcType=LONGVARCHAR}
        </if>
        <if test="'bak3'.toString() == column.value">
          #{item.bak3,jdbcType=LONGVARCHAR}
        </if>
        <if test="'bak4'.toString() == column.value">
          #{item.bak4,jdbcType=LONGVARCHAR}
        </if>
      </foreach>
      )
    </foreach>
  </insert>
  <select id="selectOneByExample" parameterType="com.hngy.educationaladministration.entity.StudentExample" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from t_student
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
    limit 1
  </select>
  <select id="selectOneByExampleWithBLOBs" parameterType="com.hngy.educationaladministration.entity.StudentExample" resultMap="ResultMapWithBLOBs">
    select
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from t_student
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
    limit 1
  </select>
  <select id="selectOneByExampleSelective" parameterType="map" resultMap="ResultMapWithBLOBs">
    select
    <choose>
      <when test="selective != null and selective.length > 0">
        <foreach collection="selective" item="column" separator=",">
          ${column.aliasedEscapedColumnName}
        </foreach>
      </when>
      <otherwise>
        <include refid="Base_Column_List" />
        ,
        <include refid="Blob_Column_List" />
      </otherwise>
    </choose>
    from t_student
    <if test="example != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
    <if test="example != null and example.orderByClause != null">
      order by ${example.orderByClause}
    </if>
    limit 1
  </select>


  <!--Static_student 学生数据源-->
  <resultMap id="CXstudent" type="com.hngy.educationaladministration.entity.Static_student">
    <id column="id" property="id"/>
    <result column="userName" property="userName"/>
    <result column="stuNum" property="stuNum"/>
    <result column="name" property="name"/>
    <result column="gender" property="gender"/>
    <result column="pwd" property="pwd"/>
    <result column="class_name" property="class_name"/>
    <result column="specialty_name" property="specialty_name"/>
    <result column="section_name" property="section_name"/>
    <result column="institute_name" property="institute_name"/>
    <result column="projectName" property="projectname"/>
    <result column="id" property="projectid"/>
    <result column="teachernames" property="teachernames"/>
    <result column="filePath" property="filepath"/>
    <result column="stuSelect_flag" property="stuselectFlag"/>
  </resultMap>
  <select id="select_Student" resultMap="CXstudent">
    SELECT
    t_student.id,
    t_student.userName,
    t_student.stuNum,
    t_student.name,
    t_student.gender,
    t_student.pwd,
    t_class.class_name,
    t_specialty.specialty_name,
    t_section.section_name,
    t_institute.institute_name
    FROM
    t_student
    INNER JOIN t_class ON t_student.id_class = t_class.id
    INNER JOIN t_specialty ON t_class.id_specialty = t_specialty.id
    INNER JOIN t_section ON t_specialty.id_section = t_section.id
    INNER JOIN t_institute ON t_section.id_institute = t_institute.id
    <where>
      <if test="institute_id != null and institute_id !=0">
        t_institute.id =#{institute_id}
      </if>
      <if test="specialty_id != null and specialty_id !=''">
        and t_specialty.id =#{specialty_id}
      </if>
      <if test="class_id != null and class_id !=''">
        and t_class.id =#{class_id}
      </if>
      <if test="student_id != null and student_id !=''">
        and t_student.id =#{student_id}
      </if>
      <if test="name != null and name !=''">
        and t_student.userName =#{name} or t_student.name=#{name} or t_student.stuNum=#{name}
      </if>
    </where>
  </select>


  <select id="select_studentXT_all" resultMap="CXstudent">
    SELECT
    t_student.id,
    t_student.userName,
    t_student.stuNum,
    t_student.name,
    t_student.gender,
    t_student.pwd,
    t_class.class_name,
    t_specialty.specialty_name,
    t_section.section_name,
    t_institute.institute_name
    FROM
    t_student
    INNER JOIN t_class ON t_student.id_class = t_class.id
    INNER JOIN t_specialty ON t_class.id_specialty = t_specialty.id
    INNER JOIN t_section ON t_specialty.id_section = t_section.id
    INNER JOIN t_institute ON t_section.id_institute = t_institute.id
    <where>
      <if test="section_id != null and section_id !=0">
        t_section.id =#{section_id}
      </if>
      <if test="section_name != null and section_name !=''">
        and t_section.section_name =#{section_name}
      </if>
      <if test="specialty_id != null and specialty_id !=0">
        and t_specialty.id =#{specialty_id}
      </if>
      <if test="specialty_name != null and specialty_name !=''">
        and t_specialty.specialty_name=#{specialty_name}
      </if>
      <if test="class_id != null and class_id !=0">
        and t_class.id =#{class_id}
      </if>
      <if test="class_name != null and class_name !=''">
        and t_class.class_name =#{class_name}
      </if>
      order by CONVERT(class_name using utf8)
    </where>
  </select>

</mapper>